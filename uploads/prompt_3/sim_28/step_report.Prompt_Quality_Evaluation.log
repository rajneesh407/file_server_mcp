[2025-09-04 15:05:26 UTC] Report execution completed. Generating outputs...
[2025-09-04 15:05:30 UTC] Error occured while generating Report Output "Prompt Quality Metrics"
[2025-09-04 15:05:30 UTC] ---------------------------------------------------------------------------
[2025-09-04 15:05:30 UTC] KeyError                                  Traceback (most recent call last):
[2025-09-04 15:05:30 UTC]  Report Figure "Prompt Quality Metrics" <v1>, line 25, in <definition>
[2025-09-04 15:05:30 UTC]         13 |     fig.update_layout(
[2025-09-04 15:05:30 UTC]         14 |         title='<b>Comprehensive Risk Evaluation Across Multiple Dimensions for Prompt</b>',
[2025-09-04 15:05:30 UTC]         15 |         polar=dict(
[2025-09-04 15:05:30 UTC] (...)
[2025-09-04 15:05:30 UTC]         21 |         height=500, 
[2025-09-04 15:05:30 UTC]         22 |     )
[2025-09-04 15:05:30 UTC]         23 |     return fig 
[2025-09-04 15:05:30 UTC]         24 | df  = raw_output['metrics_df'].copy(deep=True)[0:len(raw_output['metrics_df'])-1]
[2025-09-04 15:05:30 UTC] ---->   25 | return radial_chart(df)
[2025-09-04 15:05:30 UTC]                     ^^^^^^^^^^^^^^^^
[2025-09-04 15:05:30 UTC]     Local variables:
[2025-09-04 15:05:30 UTC]       job           = <Job job_type="Simulati...: Sep-04-2025 08:33 PM">
[2025-09-04 15:05:30 UTC]       raw_output    = {'metrics_df': pandas.DataFrame[Metric: object, Score Reviewer-1: int64, Explanation Reviewer-1: object, Response Reviewer-1: object, Tags Reviewer-1: object, common_tags: object], 'tags_df': pandas.DataFrame[Metric: object, Category: object, is_fine: int64]}
[2025-09-04 15:05:30 UTC]       df            = pandas.DataFrame[Metric: object, Score Reviewer-1: int64, Explanation Reviewer-1: object, Response Reviewer-1: object, Tags Reviewer-1: object, common_tags: object]
[2025-09-04 15:05:30 UTC]  Report Figure "Prompt Quality Metrics" <v1>, line 7, in radial_chart
[2025-09-04 15:05:30 UTC]          3 | def radial_chart(df):
[2025-09-04 15:05:30 UTC]          4 |     fig = go.Figure()
[2025-09-04 15:05:30 UTC]          6 |     fig.add_trace(go.Scatterpolar(
[2025-09-04 15:05:30 UTC] ---->    7 |         r=df['Mean Score'].tolist() + [df['Mean Score'].tolist()[0]],
[2025-09-04 15:05:30 UTC]                        ^^^^^^^^^^^^^^^^
[2025-09-04 15:05:30 UTC]          8 |         theta=df['Metric'].tolist() + [df['Metric'].tolist()[0]],
[2025-09-04 15:05:30 UTC]          9 |         fill='toself',
[2025-09-04 15:05:30 UTC]         10 |         name='Mean Score'
[2025-09-04 15:05:30 UTC]         11 |     ))
[2025-09-04 15:05:30 UTC]         13 |     fig.update_layout(
[2025-09-04 15:05:30 UTC]         14 |         title='<b>Comprehensive Risk Evaluation Across Multiple Dimensions for Prompt</b>',
[2025-09-04 15:05:30 UTC]         15 |         polar=dict(
[2025-09-04 15:05:30 UTC] (...)
[2025-09-04 15:05:30 UTC]         21 |         height=500, 
[2025-09-04 15:05:30 UTC]         22 |     )
[2025-09-04 15:05:30 UTC]     Local variables:
[2025-09-04 15:05:30 UTC]       df            = pandas.DataFrame[Metric: object, Score Reviewer-1: int64, Explanation Reviewer-1: object, Response Reviewer-1: object, Tags Reviewer-1: object, common_tags: object]
[2025-09-04 15:05:30 UTC]       fig           = Figure({
[2025-09-04 15:05:30 UTC]                           'data': []...: {'template': '...'}
[2025-09-04 15:05:30 UTC]                       })
[2025-09-04 15:05:30 UTC]  File "/opt/corridor/venv/lib/python3.11/site-packages/pandas/core/frame.py", line 3807, in DataFrame.__getitem__
[2025-09-04 15:05:30 UTC]       3804 | if is_single_key:
[2025-09-04 15:05:30 UTC]       3805 |     if self.columns.nlevels > 1:
[2025-09-04 15:05:30 UTC]       3806 |         return self._getitem_multilevel(key)
[2025-09-04 15:05:30 UTC] ----> 3807 |     indexer = self.columns.get_loc(key)
[2025-09-04 15:05:30 UTC]                            ^^^^^^^^^^^^^^^^^^^^^^^^^
[2025-09-04 15:05:30 UTC]       3808 |     if is_integer(indexer):
[2025-09-04 15:05:30 UTC]  File "/opt/corridor/venv/lib/python3.11/site-packages/pandas/core/indexes/base.py", line 3804, in Index.get_loc
[2025-09-04 15:05:30 UTC]       3801 | try:
[2025-09-04 15:05:30 UTC]       3802 |     return self._engine.get_loc(casted_key)
[2025-09-04 15:05:30 UTC]       3803 | except KeyError as err:
[2025-09-04 15:05:30 UTC] ----> 3804 |     raise KeyError(key) from err
[2025-09-04 15:05:30 UTC]       3805 | except TypeError:
[2025-09-04 15:05:30 UTC]       3806 |     # If we have a listlike key, _check_indexing_error will raise
[2025-09-04 15:05:30 UTC]       3807 |     #  InvalidIndexError. Otherwise we fall through and re-raise
[2025-09-04 15:05:30 UTC]       3808 |     #  the TypeError.
[2025-09-04 15:05:30 UTC] KeyError: 'Mean Score'
[2025-09-04 15:05:33 UTC] All 3 outputs and additional figures processed.
